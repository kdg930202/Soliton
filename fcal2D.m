%%% Define Gradient Function
function [fpsi,frev] = fcal2D(psi,rev,t,para)


psik=fftshift(fft2(ifftshift(psi)));


% fpsi=-(1i/hbar)*sstep*(...
% fftshift(ifft2(ifftshift(EC.*psik)))...  
% +(Vxy + 1i*hbar*0.5*(GinCP*rev)).*psi ...
% +1*Pxy*exp(-1i*(cw*t)).*(t>=0.5).*(t<1)...
% +1*Rabi.*phi...
%
% inc = 1; %20


b=0.02;
fpsi = -(1i/para.hbar)*para.sstep*(...
(1-1i*b)*fftshift(ifft2(ifftshift(para.EC.*psik)))...      
+ ( para.alpha*abs(psi).^2 - 1i*para.Gamma ...
+ 1i*para.hbar*pi*(para.Gin*rev) + para.beta*rev + para.Poten).*psi ...
+ para.Pr*exp(-1i*para.omega*t) ...
); 

% + para.Pr*t*(t<=para.tp)*exp(-1i*para.omega*t)/para.tp*1 ...
% + para.Pr*(2*para.tp-t)*(t>para.tp)*exp(-1i*para.omega*t)/para.tp*1 ...


frev = para.sstep*(-rev./para.tauR - para.Gin*abs(psi).^2.*rev + para.Pn );




% % Boundary condition
% fpsi(1,:)=0;
% fpsi(end,:)=0;
% fpsi(:,1)=0;
% fpsi(:,end)=0;
% 
% fphi(1,:)=0;
% fphi(end,:)=0;
% fphi(:,1)=0;
% fphi(:,end)=0;

% fpsi=-(1i/hbar)*sstep*(...
% fftshift(ifft2(ifftshift(EC.*psik)))...   
% +Vxy.*psi...
% +fftshift(ifft2(ifftshift(Rabi.*phik)))...
% );        
% 
% fphi=-(1i/hbar)*sstep*(...
% fftshift(ifft2(ifftshift(EX.*phik)))... 
% +fftshift(ifft2(ifftshift(Rabi.*psik)))...
% );        
